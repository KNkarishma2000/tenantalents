/*  libs/shared/types/src/global.d.ts  */
import type { StaticImageData } from 'next/image';

/* ──────────────────────────────────────────────────────────
   📦  Inventory
   ────────────────────────────────────────────────────────── */
export type InventoryStatus = 'in stock' | 'restock' | 'empty';

export type InventoryItem = {
  id: number;          // Primary key for the inventory row
  quantity: number;    // Units currently available
  status: InventoryStatus;
};

/* ──────────────────────────────────────────────────────────
   🛍️  Product
   ────────────────────────────────────────────────────────── */
export type Product = {
  id: number;
  name: string;
  description: string;
  price: number;           // Regular selling price
  offerPrice?: number;     // Optional discounted price
  image: StaticImageData;  // next/image asset or URL
  inventory: InventoryItem;
};

/**
 * 🆕 Payload used when the admin/seller creates a new product.
 *  - No `id` yet (it will be generated by the DB/service)
 *  - `quantity` is supplied directly; we’ll create the InventoryItem server‑side
 */
export type NewProductInput = Omit<Product, 'id' | 'inventory'> & {
  /** Initial stock level when the product is first listed */
  quantity: number;
};

/* ──────────────────────────────────────────────────────────
   📦  Orders
   ────────────────────────────────────────────────────────── */
export type OrderStatus =
  | 'unpaid'
  | 'paid'
  | 'failed'
  | 'fulfilled'
  | 'in process'
  | 'refunded'
  | 'unfulfilled'
  | 'paid, in process'
  | 'paid, fulfilled'
  | 'unpaid, in process';

export type ProductOrder = {
  id: number;            // Order‑line ID
  product: Product;      // The product that was ordered
  quantity: number;      // Units ordered
  price: number;         // Unit price *at the time of order*
  city: string;          // Shipping city
  status: OrderStatus;
};

/* make this file a module so the exported types are picked up */
export {};
