// === PRISMA GENERATOR ===
generator client {
  provider = "prisma-client-js"
}

// === DATABASE SOURCE ===
// === DATABASE SOURCE ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === ENUMS ===

/// Approval status for vendor onboarding and activity
enum VendorStatus {
  PENDING     // Default status when vendor registers
  APPROVED    // Admin has approved the vendor
  REJECTED    // Admin rejected the vendor application
  SUSPENDED   // Temporarily blocked by admin
}

// === MODELS ===

/// Represents a vendor/seller profile in the marketplace
model Vendor {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  phone     String?
  storeName String
  storeSlug String       @unique
  logoUrl   String?
  documents String[]     // KYC/GST document paths in MinIO
  status    VendorStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // === RELATIONS ===
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  products  Product[]    @relation("VendorProducts")
  orders    Order[]      @relation("VendorOrders")
  payouts   Payout[]     @relation("VendorPayouts")
  invoices  Invoice[]    @relation("VendorInvoices")
  ratings   Rating[]     @relation("VendorRatings")
}

/// Represents a registered user (basic structure; extend as needed)
model User {
  id       String    @id @default(uuid())
  email    String    @unique
  name     String
  password String
  role     String     // e.g. ADMIN, VENDOR, CUSTOMER, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // === RELATIONS ===
  vendors  Vendor[]
}

/// Product listed by a vendor
model Product {
  id       String @id @default(uuid())
  name     String
  price    Float
  vendorId String
  vendor   Vendor @relation("VendorProducts", fields: [vendorId], references: [id])
}

/// Order fulfilled by a vendor
model Order {
  id       String @id @default(uuid())
  total    Float
  vendorId String
  vendor   Vendor @relation("VendorOrders", fields: [vendorId], references: [id])
}

/// Payouts issued to a vendor (e.g., revenue share)
model Payout {
  id       String @id @default(uuid())
  amount   Float
  vendorId String
  vendor   Vendor @relation("VendorPayouts", fields: [vendorId], references: [id])
}

/// Invoice generated for vendor orders
model Invoice {
  id       String @id @default(uuid())
  fileUrl  String
  vendorId String
  vendor   Vendor @relation("VendorInvoices", fields: [vendorId], references: [id])
}

/// Buyer rating for a vendor
model Rating {
  id       String @id @default(uuid())
  score    Int
  comment  String
  vendorId String
  vendor   Vendor @relation("VendorRatings", fields: [vendorId], references: [id])
}
