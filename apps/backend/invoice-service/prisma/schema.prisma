generator client {
  provider = "prisma-client-js"
}

// === DATABASE SOURCE ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//

/// Overall order status from the buyer's perspective
enum OrderStatus {
  pending      // Order created but not confirmed
  confirmed    // Order confirmed by system/seller
  shipped      // Shipped by vendor
  delivered    // Delivered to buyer
  canceled     // Buyer/system canceled the order
  returned     // Returned by the buyer
  refunded     // Refund has been processed
}

/// Status of an individual item inside an order
enum ItemStatus {
  pending      // Added to order but not yet processed
  confirmed    // Item confirmed by seller
  shipped      // Item shipped by seller
  delivered    // Item delivered
  canceled     // Item canceled separately
  returned     // Returned by buyer
  refunded     // Refund processed for this item
}

//
// MODELS
//

/// One buyer order, possibly containing items from multiple sellers
model Order {
  id           String       @id @default(uuid())             // Unique order ID
  buyerId      String                                        // FK to user-service
  totalAmount  Decimal                                       // Final order value (sum of all items)
  status       OrderStatus  @default(pending)                // Current overall status
  paymentMode  String                                        // UPI / Card / COD / Netbanking
  paymentRef   String?                                       // Optional payment gateway ref (e.g., Razorpay txn ID)
  placedAt     DateTime     @default(now())                  // Timestamp when buyer placed the order
  updatedAt    DateTime     @updatedAt                       // Tracked whenever status updates

  items        OrderItem[]                                   // 1:N to all order items
  invoice      Invoice?                                      // 1:1 to invoice, optional if not yet generated
}

/// Represents a specific item in an order tied to a product/vendor
model OrderItem {
  id          String      @id @default(uuid())               // Unique item ID
  orderId     String                                        // FK to parent order
  productId   String                                        // FK to product-service
  listingId   String                                        // FK to product listing (vendor-specific)
  sellerId    String                                        // FK to vendor-service
  quantity    Int                                           // Quantity of the item
  unitPrice   Decimal                                       // Per unit cost (at time of order)
  totalPrice  Decimal                                       // Precomputed = quantity * unitPrice
  status      ItemStatus  @default(pending)                 // Per-item status
  addedAt     DateTime    @default(now())                   // When added to the order

  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendor      Vendor      @relation(fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([sellerId])
  @@index([status])
}

/// Invoice per vendor for their part of the order
model Invoice {
  id        String   @id @default(uuid())                    // Unique invoice ID
  orderId   String   @unique                                // Each order has one invoice (can be multi-seller split)
  vendorId  String                                           // Which vendor this invoice belongs to
  pdfUrl    String                                           // Public URL to access the invoice PDF
  filePath  String?                                          // Local/MinIO internal path of file (optional)
  bucket    String?                                          // MinIO bucket name (optional)
  issuedAt  DateTime @default(now())                        // Time of invoice generation
  createdAt DateTime @default(now())                        // Record created time

  order     Order    @relation(fields: [orderId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
}

/// Vendor/Seller who lists products and receives orders
model Vendor {
  id          String        @id @default(uuid())             // Unique vendor ID
  name        String                                         // Vendor name
  email       String                                         // Contact email
  phone       String?                                        // Optional phone

  orderItems  OrderItem[]                                    // All items sold by vendor
  invoices    Invoice[]                                      // Invoices issued to vendor
}
