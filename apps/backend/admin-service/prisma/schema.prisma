// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL Datasource
// === DATABASE SOURCE ===
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum: Role of the admin
enum AdminRole {
  ADMIN // Basic moderation access
  SUPER_ADMIN // Full access
}

// Enum: What type of moderation action is being logged
enum ModerationActionType {
  SUSPEND_SELLER
  REMOVE_PRODUCT
  APPROVE_SELLER
  REJECT_SELLER
  WARN_SELLER
  SYSTEM_NOTE
}

// Enum: Which type of entity the action is targeting (can evolve with system)
enum TargetType {
  SELLER
  PRODUCT
  USER
  ORDER
}

// Enum: Moderation resolution status
enum ModerationStatus {
  PENDING
  RESOLVED
  ESCALATED
  DISMISSED
}

// Admin: Represents a platform admin/moderator
model Admin {
  id        String    @id @default(uuid())
  userId    String    @unique // Cross-service User ID reference
  name      String
  role      AdminRole @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // One admin can perform many actions
  actions ActionLog[]

  user User @relation(fields: [userId], references: [id])
}

// ActionLog: Tracks moderation actions taken by admins
model ActionLog {
  id         String               @id @default(uuid())
  adminId    String
  actionType ModerationActionType // What action was taken
  targetType TargetType // Type of entity affected (e.g., product, seller)
  targetId   String // UUID of the affected entity
  reason     String? // Optional reason provided by the moderator
  notes      String? // Additional notes/comments
  status     ModerationStatus     @default(PENDING) // Action resolution state
  createdAt  DateTime             @default(now()) // When the action was logged
  resolvedAt DateTime? // When the action was resolved, if applicable

  // Relation: ActionLog belongs to one Admin
  admin Admin @relation(fields: [adminId], references: [id])

  // Indexes for query performance
  @@index([targetType])
  @@index([targetId])
  @@index([status])
}

// üîê Role of the platform user
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// üì¶ Seller account status
enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

// üë§ User model
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller Seller?
  admin  Admin?
}

// üõçÔ∏è Seller model
model Seller {
  id        String       @id @default(uuid())
  userId    String       @unique
  name      String
  status    SellerStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
}
