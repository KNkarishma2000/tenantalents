# # üöÄ START COMMANDS

# # Start Infrastructure (Postgres, Redis, Kafka, MinIO, Swagger, etc.)
# docker compose -f docker-compose.infrastructure.yml --env-file .env up -d

# # Start Microservices
# docker compose -f docker-compose.microservices.yml --env-file .env up -d

# # Start Both Together
# docker compose -f docker-compose.infrastructure.yml -f docker-compose.microservices.yml --env-file .env up -d

# # üîÑ REBUILD COMMANDS

# # Rebuild All Images (No Cache)
# docker compose -f docker-compose.infrastructure.yml -f docker-compose.microservices.yml build --no-cache

# # Rebuild Only Microservices
# docker compose -f docker-compose.microservices.yml build

# # üõë STOP COMMANDS

# # Stop Infrastructure
# docker compose -f docker-compose.infrastructure.yml --env-file .env down

# # Stop Microservices
# docker compose -f docker-compose.microservices.yml --env-file .env down

# # Stop Both and Remove Volumes
# docker compose -f docker-compose.infrastructure.yml -f docker-compose.microservices.yml --env-file .env down -v

# # üßπ CLEANUP

# # Remove Orphan Containers (if leftover)
# docker compose -f docker-compose.microservices.yml --env-file .env up -d --remove-orphans

# # ‚ö†Ô∏è IF PORT IS ALREADY IN USE

# # Check which process is using the port (e.g., 3000)
# lsof -i :3000

# # Kill that process (replace <PID> with actual ID)
# kill -9 <PID>

# # OR change the exposed port in docker-compose:
# # ports:
# #   - "3100:3000"  # host:container



version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: mvp_ecom_user
      POSTGRES_PASSWORD: mvp_ecom_pass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "26379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - ./.env
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    networks:
      - backend

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    environment:
      - SWAGGER_JSON_URL=${SWAGGER_JSON_URL}
    networks:
      - backend

volumes:
  pgdata:
  redis-data:
  minio-data:

networks:
  backend:
    driver: bridge
